import java.time.Instant
import java.time.ZonedDateTime
import java.time.format.DateTimeFormatter

buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath group: 'org.ajoberstar.grgit', name: 'grgit-gradle', version: grgit_version
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.ajoberstar.grgit'
apply plugin: 'maven-publish'

final String realVersion = calculateVersion()
version = realVersion.replace('/', '_')
printf("Mod version: %s%n", version)
group = 'sciwhiz12.management'
archivesBaseName = "management-${mc_version}"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

sourceSets {
    main.resources.srcDirs += 'src/generated/resources/'
}

repositories {
    maven {
        name 'gigaherz\' maven'
        url 'https://www.dogforce-games.com/maven/'
    }
}

minecraft {
    mappings channel: 'snapshot', version: mappings_version

    runs {
        client {
            workingDirectory project.file('run/client')
            property 'forge.logging.markers', logging_markers
            property 'forge.logging.console.level', 'debug'

            mods {
                management {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run/server')
            property 'forge.logging.markers', logging_markers
            property 'forge.logging.console.level', 'debug'

            mods {
                management {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run/data')
            property 'forge.logging.markers', logging_markers
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'management', '--all'
            args '--output', file('src/generated/resources/')
            args '--existing', file('src/main/resources/')

            mods {
                management {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"
}

String git_commit_id = "!unknown!", git_timestamp = "!unknown!"
try {
    def git_head = grgit.head()
    git_commit_id = git_head.id
    git_timestamp = git_head.dateTime.format(DateTimeFormatter.ISO_OFFSET_DATE_TIME)
} catch (Exception e) {
    logger.error("Error geting commit information", e)
}

jar {
    manifest {
        attributes([
                "Specification-Title"   : "management",
                "Specification-Vendor"  : "sciwhiz12",
                "Specification-Version" : "1",
                "Implementation-Title"  : project.name,
                "Implementation-Version": realVersion,
                "Implementation-Vendor" : "sciwhiz12",
                "Build-Timestamp"       : ZonedDateTime.now().withNano(0).format(DateTimeFormatter.ISO_OFFSET_DATE_TIME),
                "Git-Commit-Id"         : git_commit_id,
                "Git-Commit-Timestamp"  : git_timestamp
        ])
    }
}

String calculateVersion() {
    try {
        final String raw_version = grgit.describe(longDescr: true, tags: true)
        final String[] versionSep = raw_version.split "-"
        final String ver = versionSep[0].substring(1)
        if (!grgit.branch.current().name.matches(branch_suffix_exempt_regex)) {
            return ver + "-" + grgit.head().abbreviatedId + "-" + grgit.branch.current().name
        }
        final int commitAmount = Integer.parseInt(versionSep[1])
        if (commitAmount != 0) {
            return ver + "-" + commitAmount + "-SNAPSHOT"
        }
        return ver
    } catch (Exception e) {
        String ver = Long.toHexString(Instant.now().getEpochSecond()) + '-'
        if (System.getenv("GITHUB_RUN_NUMBER") != null) ver += System.getenv("GITHUB_RUN_NUMBER")
        else if (System.getenv("RUN_NUMBER") != null) ver += System.getenv("RUN_NUMBER")
        else ver += "unknown"
        ver += '-DEV'
        logger.error("Error getting version information, defaulting to '${ver}': {}", e.getMessage())
        return ver
    }
}

jar.finalizedBy('reobfJar')
jar.finalizedBy('sourcesJar')

task sourcesJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
    classifier "sources"
}

artifacts.archives sourcesJar

publishing {
    publications {
        outJar(MavenPublication) {
            artifact jar
        }
        sourceJar(MavenPublication) {
            artifact sourcesJar
        }
    }
    repositories {
        mavenLocal()
        maven {
            name 'projectLocal'
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
